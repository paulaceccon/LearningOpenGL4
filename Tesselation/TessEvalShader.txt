#version 410 core

layout(triangles, equal_spacing, ccw) in;

uniform mat4 pMatrix;
uniform mat4 mvMatrix;

in vec3 vEyePos_TES[];
in vec3 vNorm_TES[];

// Input for the geometry shader
out vec3 vEyePos_GS;
out vec3 vNorm_GS;

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
} 

void main()
{
	// Interpolate the attributes of the output vertex using the barycentric coordinates
	vNorm_GS = interpolate3D(vNorm_TES[0], vNorm_TES[1], vNorm_TES[2]);
	vEyePos_GS = interpolate3D(vEyePos_TES[0], vEyePos_TES[1], vEyePos_TES[2]);
	
	gl_Position = pMatrix * mvMatrix * vec4(vEyePos_GS, 1.0);
}